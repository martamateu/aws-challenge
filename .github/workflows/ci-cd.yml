name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'services/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKER_REGISTRY: docker.io
  MAIN_API_IMAGE: ${{ secrets.DOCKER_USERNAME }}/main-api
  AUX_SERVICE_IMAGE: ${{ secrets.DOCKER_USERNAME }}/auxiliary-service

jobs:
  # Job 1: Build and Test Main API
  build-main-api:
    name: Build Main API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-main-api-${{ hashFiles('services/main-api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-main-api-
      
      - name: Install dependencies
        working-directory: services/main-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Run tests
        working-directory: services/main-api
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=term -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/main-api/coverage.xml
          flags: main-api
          name: main-api-coverage
        continue-on-error: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.MAIN_API_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/main-api
          file: services/main-api/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=1.0.${{ github.run_number }}

  # Job 2: Build and Test Auxiliary Service
  build-auxiliary-service:
    name: Build Auxiliary Service
    runs-on: ubuntu-latest
    
    # Required permissions for OIDC
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-aux-service-${{ hashFiles('services/auxiliary-service/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-aux-service-
      
      - name: Install dependencies
        working-directory: services/auxiliary-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          role-session-name: GitHubActions-AuxiliaryService
        continue-on-error: true
      
      - name: Run tests
        working-directory: services/auxiliary-service
        env:
          AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          pytest tests/ --cov=app --cov-report=xml --cov-report=term -v
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: services/auxiliary-service/coverage.xml
          flags: auxiliary-service
          name: auxiliary-service-coverage
        continue-on-error: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.AUX_SERVICE_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: services/auxiliary-service
          file: services/auxiliary-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=1.0.${{ github.run_number }}

  # Job 3: Update Kubernetes manifests
  update-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: [build-main-api, build-auxiliary-service]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update Main API image tag
        run: |
          NEW_TAG="${{ github.sha }}"
          sed -i "s|image: .*/main-api:.*|image: ${{ env.MAIN_API_IMAGE }}:main-${NEW_TAG:0:7}|g" \
            kubernetes/base/main-api/deployment.yaml
      
      - name: Update Auxiliary Service image tag
        run: |
          NEW_TAG="${{ github.sha }}"
          sed -i "s|image: .*/auxiliary-service:.*|image: ${{ env.AUX_SERVICE_IMAGE }}:main-${NEW_TAG:0:7}|g" \
            kubernetes/base/auxiliary-service/deployment.yaml
      
      - name: Update ConfigMap versions
        run: |
          VERSION="1.0.${{ github.run_number }}"
          sed -i "s|APP_VERSION: \".*\"|APP_VERSION: \"${VERSION}\"|g" \
            kubernetes/base/main-api/configmap.yaml
          sed -i "s|APP_VERSION: \".*\"|APP_VERSION: \"${VERSION}\"|g" \
            kubernetes/base/auxiliary-service/configmap.yaml
      
      - name: Commit and push changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add kubernetes/
          git diff --quiet && git diff --staged --quiet || \
            (git commit -m "chore: update image tags to ${{ github.sha }} [skip ci]" && git push)

  # Job 4: Security Scanning (Optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-main-api, build-auxiliary-service]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner - Main API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.MAIN_API_IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-main-api.sarif'
      
      - name: Run Trivy vulnerability scanner - Auxiliary Service
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.AUX_SERVICE_IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-auxiliary-service.sarif'
